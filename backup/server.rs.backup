use crate::routes;
use axum::{
  body::Body,
  http::StatusCode,
  response::{IntoResponse, Response},
  Json, Router,
};
use serde_json::json;
use std::{net::SocketAddr, time::Duration};
use tower::{buffer::BufferLayer, ServiceBuilder};
use tower_http::{
  cors::{Any, CorsLayer},
  trace::TraceLayer,
};

pub struct ApplicationServer;

impl ApplicationServer {
  pub async fn serve(&self) {
    // Define allowed origins for CORS
    let allowed_origins = [
      "http://localhost:3000",
      "http://localhost:8080",
      "https://your-production-domain.com",
    ];

    // Define cors middleware with specific origins
    // .allow_origin(allowed_origins.iter().map(|origin| origin.parse().unwrap()))
    let cors = CorsLayer::new().allow_methods(Any).allow_headers(Any);

    // Define middleware stack
    let middleware_stack = ServiceBuilder::new()
      .layer(cors)
      .layer(BufferLayer::new(1024))
      .layer(TraceLayer::new_for_http());

    // Build application with routes and fallback
    let app = Router::new()
      .merge(routes::route_app())
      .fallback(Self::handle_404)

    // Run server
    let addr = SocketAddr::from(([0, 0, 0, 0], 3000));
    println!("Server running on http://{}", addr);

    let listener = tokio::net::TcpListener::bind(addr).await.unwrap();
    axum::serve(listener, app.into_make_service())
      .await
      .unwrap();
  }

  async fn handle_timeout() -> impl IntoResponse {
    let json_response = json!({
        "error": "request_timeout",
        "code": 408,
        "message": "Request took longer than 30 seconds"
    });

    (StatusCode::REQUEST_TIMEOUT, Json(json_response))
  }

  async fn handle_404() -> impl IntoResponse {
    let json_response = json!({
        "error": "not_found",
        "code": 404,
        "message": "The requested resource does not exist on this server!"
    });

    (StatusCode::NOT_FOUND, Json(json_response))
  }
}

// Custom error handler middleware
pub async fn handle_error(err: Box<dyn std::error::Error + Send + Sync>) -> Response<Body> {
  let status = if err.is::<tower::timeout::error::Elapsed>() {
    StatusCode::REQUEST_TIMEOUT
  } else {
    StatusCode::INTERNAL_SERVER_ERROR
  };

  let body = json!({
      "error": status.canonical_reason().unwrap_or("Unknown error"),
      "code": status.as_u16(),
      "message": err.to_string()
  });

  (status, Json(body)).into_response()
}
